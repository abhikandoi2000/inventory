#!/bin/bash

NORMAL=$(tput sgr0)
YELLOW=$(tput setaf 3)
GREEN=$(tput setaf 2; tput bold)
OLDIFS=$IFS

IFS=$(echo -en "\n\b")

# restore field seperator and quit
quit() {
  IFS=$OLDIFS
  exit
}

# quit if no arguments
if [ $# -eq 0 ]; then
  echo "$YELLOW[Warning]$NORMAL No file supplied"
  echo "Usage: run <filename> <arguments>"
  echo "Example: run multiply.cpp 5 6"
  quit
fi

fullname=$1
file_ext=${fullname##*.}
length=$(($#0))
arguments=${@:2:length}
if [ $file_ext = "py" ]; then
  python $fullname $arguments
elif [ $file_ext = "cpp" ] || [ $file_ext = "cc" ]; then
  cpp_executable_ext='.out'
  output_file=${fullname%.*}
  g++ -o $output_file$cpp_executable_ext $fullname
  if [ $? -ne 0 ]; then
    quit
  fi
  ./$output_file$cpp_executable_ext $arguments
  rm $output_file$cpp_executable_ext
elif [ $file_ext = "js" ]; then
  node $fullname $arguments
elif [ $file_ext = "rb" ]; then
  ruby $fullname $arguments
elif [ $file_ext = "sh" ]; then
  sh $fullname $arguments
elif [ $file_ext = "zsh" ]; then
  zsh $fullname $arguments
elif [ $file_ext = "php" ]; then
  php $fullname $arguments
elif [ $file_ext = "java" ]; then
  java_class_ext='.class'
  filename=${fullname%.*}
  javac $fullname
  if [ $? -ne 0 ]; then
    quit
  fi
  java $filename $arguments
  rm $filename$java_class_ext
elif [ $file_ext = "c" ]; then
  c_executable_ext='.out'
  output_file=${fullname%.*}
  gcc -o $output_file$c_executable_ext $fullname
  if [ $? -ne 0]; then
    quit
  fi
  ./$output_file$c_executable_ext $arguments
  rm $output_file$c_executable_ext
fi

